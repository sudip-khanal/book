# # Default values for mychart.
# # This is a YAML-formatted file.
# # Declare variables to be passed into your templates.

# # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
# replicaCount: 1

# # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
# image:
#   repository: nginx
#   # This sets the pull policy for images.
#   pullPolicy: IfNotPresent
#   # Overrides the image tag whose default is the chart appVersion.
#   tag: ""

# # This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
# imagePullSecrets: []
# # This is to override the chart name.
# nameOverride: ""
# fullnameOverride: ""

# # This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
# serviceAccount:
#   # Specifies whether a service account should be created
#   create: true
#   # Automatically mount a ServiceAccount's API credentials?
#   automount: true
#   # Annotations to add to the service account
#   annotations: {}
#   # The name of the service account to use.
#   # If not set and create is true, a name is generated using the fullname template
#   name: ""

# # This is for setting Kubernetes Annotations to a Pod.
# # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
# podAnnotations: {}
# # This is for setting Kubernetes Labels to a Pod.
# # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
# podLabels: {}

# podSecurityContext: {}
#   # fsGroup: 2000

# securityContext: {}
#   # capabilities:
#   #   drop:
#   #   - ALL
#   # readOnlyRootFilesystem: true
#   # runAsNonRoot: true
#   # runAsUser: 1000

# # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
# service:
#   # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
#   type: ClusterIP
#   # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
#   port: 80

# # This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
# ingress:
#   enabled: false
#   className: ""
#   annotations: {}
#     # kubernetes.io/ingress.class: nginx
#     # kubernetes.io/tls-acme: "true"
#   hosts:
#     - host: chart-example.local
#       paths:
#         - path: /
#           pathType: ImplementationSpecific
#   tls: []
#   #  - secretName: chart-example-tls
#   #    hosts:
#   #      - chart-example.local

# resources: {}
#   # We usually recommend not to specify default resources and to leave this as a conscious
#   # choice for the user. This also increases chances charts run on environments with little
#   # resources, such as Minikube. If you do want to specify resources, uncomment the following
#   # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
#   # limits:
#   #   cpu: 100m
#   #   memory: 128Mi
#   # requests:
#   #   cpu: 100m
#   #   memory: 128Mi

# # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

# # This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
# autoscaling:
#   enabled: false
#   minReplicas: 1
#   maxReplicas: 100
#   targetCPUUtilizationPercentage: 80
#   # targetMemoryUtilizationPercentage: 80

# # Additional volumes on the output Deployment definition.
# volumes: []
# # - name: foo
# #   secret:
# #     secretName: mysecret
# #     optional: false

# # Additional volumeMounts on the output Deployment definition.
# volumeMounts: []
# # - name: foo
# #   mountPath: "/etc/foo"
# #   readOnly: true

# nodeSelector: {}

# tolerations: []

# affinity: {}



# celery:
# # Celery Beat Values
#   beat:
#     enabled: true
#     componentName: celery-beat
#     command: 'celery -A blog.celery beat -l DEBUG'
#     replicaCount: 1
#     strategy: Recreate
# # Celery Worker Settings  
#   worker:
#     componentName: celery-worker
#     command: 'celery -A blog.celery worker -l DEBUG'
#     replicaCount: 1
#     strategy: RollingUpdate



      
# # Django Deployment Values
# replicaCount: 1
# revisionHistoryLimit: 2
# image:
#   repository: ghcr.io/sanoguzhan/django-helm-test
#   pullPolicy: IfNotPresent
#   # Overrides the image tag whose default is the chart appVersion.
#   tag: "latest"
#   containerPort: 8081


# # Job to run database migrations
# db_migrations:
#   enabled: true
#   name: db-migration
#   command: "python3 manage.py migrate --noinput"
#   resources: {}
#   safeToEvict: true

# #Django Static files and Media data folders
# # Set to path from working directory
# data:
#   staticfiles: "app/staticfiles/"
#   data_media: "app/data_media/"

# probes:
#   liveness:
#     enabled: true
#     path: /healthy
#   readiness:
#     enabled: true
#     path: /ready

# imagePullSecrets: []
# nameOverride: ""
# fullnameOverride: ""



# Django Service Values
# service:
#   type: ClusterIP
#   port: 80


# Env ConfigMap values 
# envConfigs:
#  STATIC_ROOT: "staticfiles"
#  CELERY_BROKER_URL: ""

# Enc Secret Values (Base64 encoded data)
# envSecrets: {}


# Django Ingress Values 
ingress:
  enabled: false
  annotations: {}
  hosts:
    - host: example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

api:
  enabled: true
  replicaCount: 1
  containerPort: 80
  componentName: api
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

celery:
# Celery Beat Values
  beat:
    enabled: true
    replicaCount: 1
    componentName: celery-beat
    command: 'celery -A blog.celery beat -l DEBUG'
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi

# Celery Worker Settings  
  worker:
    enabled: true
    replicaCount: 1
    componentName: celery-worker
    command: 'celery -A blog.celery worker -l DEBUG'
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi

postgresql:
  enabled: true
  architecture: standalone
  auth:
    database: test
    # NOTE: For production. Use existingSecret.
    # TODO: Pass existingSecret to api/worker instances
    username: test
    password: test
  primary:
    resourcesPreset: "nano"
    persistence:
      enabled: true
      size: 1Gi
      storageClass: "longhorn"

redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: false
  master:
    resourcesPreset: "nano"
      storageClass: "longhorn"




serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}



env:
  # APP_ENVIRONMENT:
  DJANGO_DEBUG: false
  DJANGO_TIME_ZONE: UTC
  DJANGO_ALLOWED_HOST: "*"
  APP_HTTP_PROTOCOL: https
  APP_DOMAIN:
  # Redis (Required if redis.enabled is false)
  CELERY_REDIS_URL:
  DJANGO_CACHE_REDIS_URL:
  # -- Celery
  CELERY_BROKER_URL: redis://redis:6379/0
  CELERY_RESULT_BACKEND: redis://redis:6379/0
  CELERY_ACCEPT_CONTENT: json, application/text
  # Sentry
  SENTRY_TRACES_SAMPLE_RATE: 0.2
  SENTRY_PROFILE_SAMPLE_RATE: 0.2

secrets:
  DJANGO_SECRET_KEY: z_v77g1nmeymo(9q6(5f2%w5t9&n$#&p278*=gmmy@k411ves
  # Database (required if postgresql.enabled if false)
  DATABASE_NAME: test
  DATABASE_USER: test
  DATABASE_PASSWORD: test
  DATABASE_HOST: localhost
  DATABASE_PORT: 5432
  # Sentry
  SENTRY_DSN: